import multiprocessing
multiprocessing.set_start_method('spawn', force=True)

import argparse
from multiprocessing import Process

def train_model(proc_id, epochs):
    import tensorflow as tf
    from tensorflow.keras import layers, models
    import psutil
    import time

    tf.config.threading.set_intra_op_parallelism_threads(1)
    tf.config.threading.set_inter_op_parallelism_threads(1)

    (x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

    train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train))
    train_ds = train_ds.shuffle(5000).batch(64)

    test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test))
    test_ds = test_ds.batch(64)

    model = models.Sequential([
        layers.Input(shape=(32, 32, 3)),
        layers.Conv2D(32, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.Flatten(),
        layers.Dense(64, activation='relu'),
        layers.Dense(10)
    ])

    model.compile(optimizer='adam',
                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logit>
                  metrics=['accuracy'])

    start = time.time()
    model.fit(train_ds, epochs=epochs, validation_data=test_ds, verbose=0)
    end = time.time()

    test_loss, test_acc = model.evaluate(test_ds, verbose=0)
    print(f"[Process {proc_id}] Epochs: {epochs} — Accuracy: {test_acc:.4f} — T>

    cpu = psutil.cpu_percent(interval=1)
    mem = psutil.virtual_memory().percent
    print(f"[Process {proc_id}] CPU: {cpu}% | Memory: {mem}%")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--epochs', type=int, default=10)
    args = parser.parse_args()

    num_procs = 1
    processes = []

    for i in range(num_procs):
        p = Process(target=train_model, args=(i, args.epochs))
        p.start()
        processes.append(p)

    for p in processes:
        p.join()


